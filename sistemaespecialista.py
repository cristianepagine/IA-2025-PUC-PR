# -*- coding: utf-8 -*-
"""sistemaespecialista

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oZBdHhi_KkWAjnab9cwn4dD4cRj4eM--
"""

from itertools import chain

# com arvore de regras em 3 níveis
class SistemaEspecialista:
    def __init__(self):
        """
        Inicializa o sistema com regras hierárquicas:
        Nível 1: Categorias amplas (sintomas agrupados)
        Nível 2: Conceitos intermediários (compostos pelas categorias)
        Nível 3: Doenças específicas (compostas por categorias e conceitos)
        """
        # Nível 1 - Regras abstratas
        self.regras_nivel_1 = {
            "doenca_respiratoria": {"febre", "tosse"},
            "doenca_viral": {"febre", "dor muscular"},
            "infeccao_bacteriana": {"febre", "dor de garganta", "secrecao"},
            "alergia_respiratoria": {"espirros", "nariz entupido", "olhos lacrimejando"},
        }

        # Nível 2 - Regras intermediárias
        self.regras_nivel_2 = {
            "quadro_viral_grave": {"doenca_viral", "falta de ar", "dor no corpo"},
            "infeccao_aguda": {"infeccao_bacteriana", "dor intensa"},
            "crise_alergica": {"alergia_respiratoria", "coceira"},
        }

        # Nível 3 - Regras específicas (doenças)
        self.regras_nivel_3 = {
            "gripe": {"doenca_respiratoria", "dor de garganta"},
            "covid": {"quadro_viral_grave", "perda de olfato"},
            "dengue": {"doenca_viral", "manchas na pele"},
            "zika": {"doenca_viral", "manchas na pele", "dor nas articulacoes"},
            "amigdalite": {"infeccao_aguda", "dificuldade para engolir"},
            "otite": {"infeccao_aguda", "dor de ouvido"},
            "rinite": {"alergia_respiratoria"},
            "alergia_sazonal": {"crise_alergica", "olhos lacrimejando"},
        }

    def inferencia_progressiva(self):

      #  Realiza inferência progressiva:
       # Pergunta ao usuário sobre sintomas e tenta identificar uma doença
        # com base nas regras hierárquicas.

        print("\nResponda 'sim' ou 'não' para os seguintes sintomas:")

        # Coleta todos os sintomas diretos do sistema
        sintomas_possiveis = {s for v in self.regras_nivel_1.values() for s in v}
        sintomas_possiveis |= {
            s for v in chain(self.regras_nivel_2.values(), self.regras_nivel_3.values())
            for s in v if s not in self.regras_nivel_1 and s not in self.regras_nivel_2
        }

        sintomas_usuario = set()

         # Pergunta ao usuário sobre cada sintoma
        for sintoma in sorted(sintomas_possiveis):
            resposta = input(f"Você tem {sintoma}? ").strip().lower()
            if resposta == "sim":
                sintomas_usuario.add(sintoma)
         # Verifica quais categorias (nível 1) estão presentes com base nos sintomas
        categorias_confirmadas = {
            nome for nome, sintomas in self.regras_nivel_1.items()
            if sintomas.issubset(sintomas_usuario)
        }
        # Verifica quais conceitos intermediários (nível 2) podem ser confirmados
        intermediarias_confirmadas = {
            nome for nome, requisitos in self.regras_nivel_2.items()
            if all((r in categorias_confirmadas or r in sintomas_usuario) for r in requisitos)
        }

        doencas_possiveis = []
         # Tenta identificar quais doenças (nível 3) são compatíveis com os sintomas e regras
        for doenca, requisitos in self.regras_nivel_3.items():
            if all(
                r in sintomas_usuario or
                r in categorias_confirmadas or
                r in intermediarias_confirmadas
                for r in requisitos
            ):
                doencas_possiveis.append(doenca)
        # Exibe o resultado
        if doencas_possiveis:
            print("\nDiagnóstico(s) provável(is):", ", ".join(doencas_possiveis))
        else:
            print("\nNenhuma doença identificada com os sintomas fornecidos.")

    def inferencia_regressiva(self):


       # Realiza inferência regressiva:
        # O usuário escolhe uma doença e o sistema pergunta se os sintomas associados estão presentes.


        doenca = input("\nQual doença deseja verificar? ").strip().lower()

        if doenca in self.regras_nivel_3:
            print(f"\nPara confirmar {doenca}, responda:")
            requisitos = self.regras_nivel_3[doenca]

             # Verifica cada requisito da doença
            for item in requisitos:
                if item in self.regras_nivel_1:
                    for sintoma in self.regras_nivel_1[item]:
                        resposta = input(f"Você tem {sintoma}? ").strip().lower()
                        if resposta != "sim":
                            print(f"\nVocê não apresenta todos os sintomas da categoria '{item}'.")
                            return
                elif item in self.regras_nivel_2:
                    for sub in self.regras_nivel_2[item]:
                        if sub in self.regras_nivel_1:
                            for sintoma in self.regras_nivel_1[sub]:
                                resposta = input(f"Você tem {sintoma}? ").strip().lower()
                                if resposta != "sim":
                                    print(f"\nVocê não apresenta todos os sintomas da categoria '{sub}' (parte de '{item}').")
                                    return
                        else:
                            resposta = input(f"Você tem {sub}? ").strip().lower()
                            if resposta != "sim":
                                print(f"\nVocê não apresenta '{sub}', necessário para confirmar '{item}'.")
                                return
                else:
                    resposta = input(f"Você tem {item}? ").strip().lower()
                    if resposta != "sim":
                        print(f"\nVocê não apresenta todos os sintomas de {doenca}.")
                        return
            print(f"\nDiagnóstico confirmado para {doenca}.")
        else:
            print("\nDoença não encontrada no sistema.")

    def mostrar_arvore(self):

        """Exibe todas as regras hierárquicas (nível 1, 2 e 3)."""
        print("\nNível 1 - Categorias Abstratas:")
        for k, v in self.regras_nivel_1.items():
            print(f"- {k}: {', '.join(v)}")

        print("\nNível 2 - Conceitos Intermediários:")
        for k, v in self.regras_nivel_2.items():
            print(f"- {k}: {', '.join(v)}")

        print("\nNível 3 - Doenças Específicas:")
        for k, v in self.regras_nivel_3.items():
            print(f"- {k}: {', '.join(v)}")

    def mostrar_sintomas(self):

      #Exibe todos os sintomas conhecidos do sistema.
        sintomas = {s for v in self.regras_nivel_1.values() for s in v}
        sintomas |= {
            s for v in chain(self.regras_nivel_2.values(), self.regras_nivel_3.values())
            for s in v if s not in self.regras_nivel_1 and s not in self.regras_nivel_2
        }
        print("\nSintomas cadastrados no sistema:")
        for s in sorted(sintomas):
            print(f"- {s}")


# Menu principal
if __name__ == "__main__":
    sistema = SistemaEspecialista()
    while True:
        print("\n==== MENU ====")
        print("1 - Inferência Progressiva")
        print("2 - Inferência Regressiva")
        print("3 - Mostrar Sintomas")
        print("4 - Mostrar Árvore de Regras")
        print("5 - Sair")

        opcao = input("Escolha uma opção: ").strip()

        if opcao == "1":
            sistema.inferencia_progressiva()
        elif opcao == "2":
            sistema.inferencia_regressiva()
        elif opcao == "3":
            sistema.mostrar_sintomas()
        elif opcao == "4":
            sistema.mostrar_arvore()
        elif opcao == "5":
            print("\nSaindo do sistema...")
            break
        else:
            print("\nOpção inválida. Tente novamente.")