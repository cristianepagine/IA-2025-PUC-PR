# -*- coding: utf-8 -*-
"""GrafosConceituais.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lp0e514MlpHW0ktutzvnKWUIuAc-hOlD

Grafo para a Frase 1
"""

import networkx as nx
import matplotlib.pyplot as plt

# Função para desenhar o grafo com melhorias visuais
def desenhar_grafo(grafo):
    pos = nx.spring_layout(grafo, k=2.0, iterations=50)  # Layout para evitar sobreposição
    plt.figure(figsize=(5, 5))
    nx.draw(grafo, pos, with_labels=True, node_size=4000, node_color='lightblue', font_size=12, font_weight='bold', arrows=True, edge_color='gray')
    plt.title("Grafos", size=12)
    plt.show()

# Grafo para a Frase 1: Rodrigo escreve um artigo
grafo1 = nx.DiGraph()

# Adicionando arestas para a Frase 1 (duas arestas: uma entre "Rodrigo" e "escreve", e outra entre "escreve" e "Artigo")
grafo1.add_edges_from([("Rodrigo(03)", "escreve"), ("escreve", "Artigo(10)")])

# Desenhando o grafo para a Frase 1
desenhar_grafo(grafo1)

"""Grafo para a Frase 2"""

# Grafo para a Frase 2: Rodrigo envia este artigo ao Felipe
grafo2 = nx.DiGraph()

# Adicionando arestas
grafo2.add_edges_from([("Rodrigo(03)", "envia"), ("envia", "Artigo(10)"), ("Artigo(10)", "Felipe(04)")])

# Desenhando o grafo
desenhar_grafo(grafo2)

"""Grafo para a Frase 3"""

# Grafo para a Frase 3: Felipe corrige o artigo
grafo3 = nx.DiGraph()

# Adicionando arestas
grafo3.add_edges_from([("Felipe(04)", "corrige"), ("corrige", "Artigo(10)")])

# Desenhando o grafo
desenhar_grafo(grafo3)

"""Grafo para a Frase 4"""

# Grafo para a Frase 4: Felipe envia este artigo ao Isabela
grafo4 = nx.DiGraph()

# Adicionando arestas
grafo4.add_edges_from([("Felipe(04)", "envia"), ("envia", "Artigo(10)"), ("Artigo(10)", "Isabela(05)")])

# Desenhando o grafo
desenhar_grafo(grafo4)

"""Grafo para a Frase 5"""

# Grafo para a Frase 5: Isabela revisa o artigo
grafo5 = nx.DiGraph()

# Adicionando arestas
grafo5.add_edges_from([("Isabela(05)", "revisa"), ("revisa", "Artigo(10)")])

# Desenhando o grafo
desenhar_grafo(grafo5)

"""Grafo para a Frase 6"""

# Grafo para a Frase 6: Isabela envia este artigo à Maria
grafo6 = nx.DiGraph()

# Adicionando arestas
grafo6.add_edges_from([("Isabela(05)", "envia"), ("envia", "Artigo(10)"), ("Artigo(10)", "Maria(06)")])

# Desenhando o grafo
desenhar_grafo(grafo6)

"""Grafo para a Frase 7"""

# Grafo para a Frase 7: Maria submete o artigo à revista "ESA"
grafo7 = nx.DiGraph()

# Adicionando arestas
grafo7.add_edges_from([("Maria(06)", "submete"), ("submete", "Artigo(10)"), ("Artigo(10)", "Revista(ESA)")])

# Desenhando o grafo
desenhar_grafo(grafo7)

"""merge deles seguintes as regras de conjunção e simplificação"""

import networkx as nx
import matplotlib.pyplot as plt

# Função para desenhar o grafo com melhorias visuais
def desenhar_grafo(grafo):
    pos = nx.spring_layout(grafo, k=2.0, iterations=50)  # Layout para evitar sobreposição
    plt.figure(figsize=(8, 8))
    nx.draw(grafo, pos, with_labels=True, node_size=4000, node_color='lightblue', font_size=12, font_weight='bold', arrows=True, edge_color='gray')
    plt.show()

# Grafo final que irá conter todos os grafos individuais combinados
grafo_final = nx.DiGraph()

# Adicionando as arestas de cada grafo ao grafo final
grafo_final.add_edges_from([("Rodrigo(03)", "escreve"), ("escreve", "Artigo(10)")])  # Frase 1
grafo_final.add_edges_from([("Rodrigo(03)", "envia"), ("envia", "Artigo(10)"), ("Artigo(10)", "Felipe(04)")])  # Frase 2
grafo_final.add_edges_from([("Felipe(04)", "corrige"), ("corrige", "Artigo(10)")])  # Frase 3
grafo_final.add_edges_from([("Felipe(04)", "envia"), ("envia", "Artigo(10)"), ("Artigo(10)", "Isabela(05)")])  # Frase 4
grafo_final.add_edges_from([("Isabela(05)", "revisa"), ("revisa", "Artigo(10)")])  # Frase 5
grafo_final.add_edges_from([("Isabela(05)", "envia"), ("envia", "Artigo(10)"), ("Artigo(10)", "Maria(06)")])  # Frase 6
grafo_final.add_edges_from([("Maria(06)", "submete"), ("submete", "Artigo(10)"), ("Artigo(10)", "Revista(ESA)")])  # Frase 7

# Desenhando o grafo final
desenhar_grafo(grafo_final)